// Generated by jextract

package io.github.jbellis.jvector.vector.cnative;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class NativeSimdOps {

    NativeSimdOps() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }

    private static class check_compatibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            NativeSimdOps.C_BOOL    );

        public static final MemorySegment ADDR = NativeSimdOps.findOrThrow("check_compatibility");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool check_compatibility()
     * }
     */
    public static FunctionDescriptor check_compatibility$descriptor() {
        return check_compatibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool check_compatibility()
     * }
     */
    public static MethodHandle check_compatibility$handle() {
        return check_compatibility.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool check_compatibility()
     * }
     */
    public static MemorySegment check_compatibility$address() {
        return check_compatibility.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool check_compatibility()
     * }
     */
    public static boolean check_compatibility() {
        var mh$ = check_compatibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("check_compatibility");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class simd_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            NativeSimdOps.C_INT    );

        public static final MemorySegment ADDR = NativeSimdOps.findOrThrow("simd_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int simd_version()
     * }
     */
    public static FunctionDescriptor simd_version$descriptor() {
        return simd_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int simd_version()
     * }
     */
    public static MethodHandle simd_version$handle() {
        return simd_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int simd_version()
     * }
     */
    public static MemorySegment simd_version$address() {
        return simd_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int simd_version()
     * }
     */
    public static int simd_version() {
        var mh$ = simd_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("simd_version");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class quantized_partials {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            NativeSimdOps.C_FLOAT,
            NativeSimdOps.C_POINTER,
            NativeSimdOps.C_INT,
            NativeSimdOps.C_INT,
            NativeSimdOps.C_POINTER,
            NativeSimdOps.C_POINTER
        );

        public static final MemorySegment ADDR = NativeSimdOps.findOrThrow("quantized_partials");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void quantized_partials(float delta, const float *partials, int codebookCount, int codebookSize, const float *partialBases, unsigned char *quantizedPartials)
     * }
     */
    public static FunctionDescriptor quantized_partials$descriptor() {
        return quantized_partials.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void quantized_partials(float delta, const float *partials, int codebookCount, int codebookSize, const float *partialBases, unsigned char *quantizedPartials)
     * }
     */
    public static MethodHandle quantized_partials$handle() {
        return quantized_partials.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void quantized_partials(float delta, const float *partials, int codebookCount, int codebookSize, const float *partialBases, unsigned char *quantizedPartials)
     * }
     */
    public static MemorySegment quantized_partials$address() {
        return quantized_partials.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void quantized_partials(float delta, const float *partials, int codebookCount, int codebookSize, const float *partialBases, unsigned char *quantizedPartials)
     * }
     */
    public static void quantized_partials(float delta, MemorySegment partials, int codebookCount, int codebookSize, MemorySegment partialBases, MemorySegment quantizedPartials) {
        var mh$ = quantized_partials.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("quantized_partials", delta, partials, codebookCount, codebookSize, partialBases, quantizedPartials);
            }
            mh$.invokeExact(delta, partials, codebookCount, codebookSize, partialBases, quantizedPartials);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bulk_quantized_shuffle_euclidean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            NativeSimdOps.C_POINTER,
            NativeSimdOps.C_INT,
            NativeSimdOps.C_INT,
            NativeSimdOps.C_POINTER,
            NativeSimdOps.C_FLOAT,
            NativeSimdOps.C_FLOAT,
            NativeSimdOps.C_POINTER
        );

        public static final MemorySegment ADDR = NativeSimdOps.findOrThrow("bulk_quantized_shuffle_euclidean");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bulk_quantized_shuffle_euclidean(const unsigned char *shuffles, int codebookCount, int nNeighbors, const char *quantizedPartials, float delta, float minDistance, float *results)
     * }
     */
    public static FunctionDescriptor bulk_quantized_shuffle_euclidean$descriptor() {
        return bulk_quantized_shuffle_euclidean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bulk_quantized_shuffle_euclidean(const unsigned char *shuffles, int codebookCount, int nNeighbors, const char *quantizedPartials, float delta, float minDistance, float *results)
     * }
     */
    public static MethodHandle bulk_quantized_shuffle_euclidean$handle() {
        return bulk_quantized_shuffle_euclidean.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bulk_quantized_shuffle_euclidean(const unsigned char *shuffles, int codebookCount, int nNeighbors, const char *quantizedPartials, float delta, float minDistance, float *results)
     * }
     */
    public static MemorySegment bulk_quantized_shuffle_euclidean$address() {
        return bulk_quantized_shuffle_euclidean.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bulk_quantized_shuffle_euclidean(const unsigned char *shuffles, int codebookCount, int nNeighbors, const char *quantizedPartials, float delta, float minDistance, float *results)
     * }
     */
    public static void bulk_quantized_shuffle_euclidean(MemorySegment shuffles, int codebookCount, int nNeighbors, MemorySegment quantizedPartials, float delta, float minDistance, MemorySegment results) {
        var mh$ = bulk_quantized_shuffle_euclidean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bulk_quantized_shuffle_euclidean", shuffles, codebookCount, nNeighbors, quantizedPartials, delta, minDistance, results);
            }
            mh$.invokeExact(shuffles, codebookCount, nNeighbors, quantizedPartials, delta, minDistance, results);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class assemble_and_sum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            NativeSimdOps.C_FLOAT,
            NativeSimdOps.C_POINTER,
            NativeSimdOps.C_INT,
            NativeSimdOps.C_POINTER,
            NativeSimdOps.C_INT,
            NativeSimdOps.C_INT
        );

        public static final MemorySegment ADDR = NativeSimdOps.findOrThrow("assemble_and_sum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float assemble_and_sum(const float *data, int dataBase, const unsigned char *baseOffsets, int baseOffsetsOffset, int baseOffsetsLength)
     * }
     */
    public static FunctionDescriptor assemble_and_sum$descriptor() {
        return assemble_and_sum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float assemble_and_sum(const float *data, int dataBase, const unsigned char *baseOffsets, int baseOffsetsOffset, int baseOffsetsLength)
     * }
     */
    public static MethodHandle assemble_and_sum$handle() {
        return assemble_and_sum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float assemble_and_sum(const float *data, int dataBase, const unsigned char *baseOffsets, int baseOffsetsOffset, int baseOffsetsLength)
     * }
     */
    public static MemorySegment assemble_and_sum$address() {
        return assemble_and_sum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float assemble_and_sum(const float *data, int dataBase, const unsigned char *baseOffsets, int baseOffsetsOffset, int baseOffsetsLength)
     * }
     */
    public static float assemble_and_sum(MemorySegment data, int dataBase, MemorySegment baseOffsets, int baseOffsetsOffset, int baseOffsetsLength) {
        var mh$ = assemble_and_sum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("assemble_and_sum", data, dataBase, baseOffsets, baseOffsetsOffset, baseOffsetsLength);
            }
            return (float)mh$.invokeExact(data, dataBase, baseOffsets, baseOffsetsOffset, baseOffsetsLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pq_decoded_cosine_similarity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            NativeSimdOps.C_FLOAT,
            NativeSimdOps.C_POINTER,
            NativeSimdOps.C_INT,
            NativeSimdOps.C_INT,
            NativeSimdOps.C_INT,
            NativeSimdOps.C_POINTER,
            NativeSimdOps.C_POINTER,
            NativeSimdOps.C_FLOAT
        );

        public static final MemorySegment ADDR = NativeSimdOps.findOrThrow("pq_decoded_cosine_similarity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float pq_decoded_cosine_similarity(const unsigned char *baseOffsets, int baseOffsetsOffset, int baseOffsetsLength, int clusterCount, const float *partialSums, const float *aMagnitude, float bMagnitude)
     * }
     */
    public static FunctionDescriptor pq_decoded_cosine_similarity$descriptor() {
        return pq_decoded_cosine_similarity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float pq_decoded_cosine_similarity(const unsigned char *baseOffsets, int baseOffsetsOffset, int baseOffsetsLength, int clusterCount, const float *partialSums, const float *aMagnitude, float bMagnitude)
     * }
     */
    public static MethodHandle pq_decoded_cosine_similarity$handle() {
        return pq_decoded_cosine_similarity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float pq_decoded_cosine_similarity(const unsigned char *baseOffsets, int baseOffsetsOffset, int baseOffsetsLength, int clusterCount, const float *partialSums, const float *aMagnitude, float bMagnitude)
     * }
     */
    public static MemorySegment pq_decoded_cosine_similarity$address() {
        return pq_decoded_cosine_similarity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float pq_decoded_cosine_similarity(const unsigned char *baseOffsets, int baseOffsetsOffset, int baseOffsetsLength, int clusterCount, const float *partialSums, const float *aMagnitude, float bMagnitude)
     * }
     */
    public static float pq_decoded_cosine_similarity(MemorySegment baseOffsets, int baseOffsetsOffset, int baseOffsetsLength, int clusterCount, MemorySegment partialSums, MemorySegment aMagnitude, float bMagnitude) {
        var mh$ = pq_decoded_cosine_similarity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pq_decoded_cosine_similarity", baseOffsets, baseOffsetsOffset, baseOffsetsLength, clusterCount, partialSums, aMagnitude, bMagnitude);
            }
            return (float)mh$.invokeExact(baseOffsets, baseOffsetsOffset, baseOffsetsLength, clusterCount, partialSums, aMagnitude, bMagnitude);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

